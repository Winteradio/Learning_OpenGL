## Program Class Design

	1. Program 클래스 설계
		
		vertex shader, fragment shader를 연결한 pipeline Program

		이 program을 이용해서 최종적으로 그림을 그린다.

		두 개의 shader를 입력 받아서 program을 링크 시킨다.

		싱크에 성공하면 OpenGLprogram object를 생성

		실패하면 메모리 할당 해제



	2. 이렇게 설계된 이유

		vertex, fragment shader 외에 여러 개의 Shader를 링크할 수도 있게 함

		Shader 인스턴스 인자는 필요하지만 소유할 필요는 없음

		Shader 인스턴스는 다른 Program인 인스터스를 만드는 데 재사용할 수도 있음

		따라서 shared pointer를 사용:ShaderPtr


	
	3. 코드 리팩토링

		프로그램 라이프사이클을 고려하여 코드 리팩토링
			
			GLFW / OpenGL Context / GLAD 초기화

			그림을 그리기 위한 OpenGL objects 생성(Shader, Program)

			렌더링

			OpenGL Objects 제거

			GLFW 종료 / 프로그램 종료


		OpenGL object들을 관리하고 렌더링하는 코드를 분리하자


#Graphics Pipeline Architecture

	진행순서
		1. Vertices (Application Program)
			Application에서 Vertices(3차원 상의 점들)이 들어온다.		

		2. Vertex Processor
			Vertex Processor에서 Vertex Processing을 통해 2차원으로 가져온다

		3. Clipper and Primitive Assembler
			Clipper를 통해 이미지를 자른다.
			Primitive Assembler를 통해 어떤 도형인지 알아낸다.

		4. Rasterizer
			Rasterizer를 통해 알아낸 도형에 해당하는 Pixel들을 알아낸다.

		5. Fragment Processor
			Fragment Processor에서 Pixel에 대한 밝기(색) 결정한다.

		6. Pixels (Display)
			Pixels이 Display 된다

			>> 3차원의 점들이 여러 과정을 거친 후 우리에게 2차원으로 보여지는 것이다.


	[Vertex Processing]
		## 3차원에 있는 점들을 2차원 평면에 상을 맺게 하는 과정

			3차원에 있는 점은 2차원의 평면 상에 어떤 점에 갈지를 계산해야 한다.
			즉, 3차원 좌표계를 2차원 좌표계로 옮기는 과정이다. 
			그렇기 때문에 기하학적인 지식이 어느정도 들어가게 된다.
			결국엔 3차원 상의 한 점이 2차원 상에 어떤 점에 해당되는 지를 결정하는 문제를 풀어야 한다.

			카메라를 옆으로 돌리면?
			물체를 회전시키면?
			다른 그림이 그려질 것이다.
			그래서 그림을 정적으로 보여주지 못하고 계속해서 계산하고 보여줘야 한다.
			이를 전문적으로 계산하는 과정을
				"Vertex Processing"
			이라 한다.

		
		## Projection
			
			이때 Projection이라는 과정이 있다.
			멀리 있는 것을 작게 보이고, 가까이 있는 것을 크게 보이게 할 것인지 말 것인지 결정하는 과정이다.
			원근법이라는 말이 친숙할 것이다.


			(1). 원근법 적용
				
				Object에서 COP(초점)으로 오면서 2차원 평면과 만나는 점들을 그려보면,
				멀리 있는 게 작게 그려지게 된다.

			(2). 원근법 미적용

				Object에서 한 초점이 아닌, 그냥 같은 방향으로 선을 그려준다.
				그때 2차원 평면과 만나는 점들로 그리는 것이다.
				이 방법은 크기를 가늠해야 하는 건물 설계, 물건 설계에서 주로 쓰인다.

			이 외에도 카메라 위치, 카메라 렌즈의 종류 등도 고려해서 계산 해야 한다.

	
	[Primitive Assembly]
		## 점 사이에 선을 긋거나, 여러 점을 모아서 다각형을 만드는 과정

			Vertex Processing을 통해 2차원의 점이 생겼다. 
			그런데 점으로 존재하기 위해 계산한 것이 아니다.
			점 사이에 선을 긋거나, 점들을 모아서 Primitive를 만들어서 색칠하거나 하는 등의 목적으로 계산한 것이다.

			그래서 이 점들을 다각형인지, 삼각형인지, 선인지 알게 하는 과정이다.

			정확하게는 어떤 픽셀이 점이나 선에 해당하는지 계산하는 과정이라 볼 수 있다.


	[Clipping]
		## 보이지 않는 바깥 부분을 버리는 과정이다.
			
			카메라 입장에서는 시야 밖의 부분이 보이질 않는다
			경우에 따라서 너무 가까이 있거나, 멀리 있어서 버리는 경우도 있다.
			>> 카메라를 설정할 때, 근접거리와 최대거리를 설정하는 이유

			그래서 실제로 보이는 부분이 사각뿔 형태로 보인다.
			>> 절두체( View Volumn )


	[Rasterization]
		## 화면에서 각각의 픽셀이 다각형에서 어떤 부분에 해당하는지 알아내는 과정이다.

			숫자로 되어있는, 연속적인 선으로 되어 있는 다각형이 Pixel로 구성되어 있는 (Raster) 화면에서 어떤 pixel에 해당하는지 계산하는 과정이다.
			>> 주어진 2차원의 정보가 어떤 3차원의 정보에서 추출한 것인지 판별하는 과정

			삼각형이 2차원에 그려져야 하므로, 각각의 픽셀이 어떤 삼각형에 해당하는지 알아야 한다.
			그래야 각 픽셀을 색칠할 수 있다. 
			이때 알아낸 각각 하나의 점을
				"fragment"
			라고 한다.


	[Fragment Processing]
		## Fragment마다 어떤 색을 칠하는 과정

			위 과정들을 거친 pixel에 어떤 밝기를 줄까를 결정하면 된다.
			조명이나 물체에 따라 결정된다.


	[Hidden Surface Removal]
		## 어떤 게 그려지고, 어떤 게 가려지는 것을 표현하는 과정을
			
			3차원 상에 이것저것 그리다보니, A 삼각형, B 사각형 등등 여러가지가 그려지게 된다.
			만약 A와 B가 2차원에서 겹쳐져 있고, 3차원에서 A가 앞에, B가 뒤에 있다고 생각해보자.
			그러면 2차원 상에서는 무엇이 보여야할까?

			아마 앞에 있는 A가 그려지게 될 것이다.

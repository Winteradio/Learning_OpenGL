## GLSL

	1. OpenGL Shader Language

		Shader : GPU 상에서 동작하는 그림을 그리기 위한 작은 프로그램

		정점별 / 픽셀별로 병렬 수행되어 성능을 높임

		GLSL : OpenGL에서 shader를 작성하기 위해 제공하는 C 기반 언어

		그 외의 대표적인 shader Language
			
			HLSL : DirectX용 shader Language

			Metal : Metal용 shader Language

			cg : nVidia가 제시한 shader Language

	
	2. GLSL source code의 대략적인 구조

		#version version_number

		in type in_variable_name; // shader input

		out type out_variable_name; // shader output

		uniform type uniform_name;

		void main() { // main함수

			out_variable_name = weird_stuff_we_processed;
		}


	3. GLSL에서 사용 가능한 data type

		기본 타입 : int, float, double, uint, bool

		벡터 타입 :
					
					vecX : float형 벡터
					bvecX : bool형 벡터
					ivecX : int형 벡터
					uvecX : uint형 벡터
					dvecX : double형 벡터

					X에는 2,3,4 사용 가능하다

		행렬 타입 :
					
					matX : float형 행렬
					bmatX : bool형 행렬
					imatX : int형 행렬
					umatX : uint형 행렬
					dmatX : double형 행렬

					X에는 2,3,4 사용 가능하다

	4. VECTOR

		벡터 원소 접근

			.x .y .z .w 인덱스를 사용

		SWIZZLING 가능

			얻어오고 싶은 인덱스를 연속으로 쓰기
			.xyz >> vec3

		.rgba .stpq도 동일한 방식으로 사용가능


		벡터 초기값 선언
			
			생성자 사용

			다른 벡터를 섞어서 사용 가능

			vec2 vect = vec2(0.5,0.7);
			vec4 result = vec4(vect, 0.0, 0.0);


	5. IN / out

		Shader 의 입출력 구조

			모든 shader는 용도에 맞는 입출력이 선언되어 있어야 함

			IN / OUT : shader의 입출력을 가리키는 type qualifier


		Vertex Shader

			각 정점 별로 설정된 vertex attribute를 입력받는다

			몇 번째 attribute를 입력받을지에 대한 추가적인 설정을 할 수 있음
				layout (location = n)

			반드시 정점의 출력 위치 gl_Position값을 계산해줘야함

		Rasterization
			
			Vertex shader의 출력값을 primitive에 맞게 보간하여 픽셀별 값으로 변환

		Fragment Shader

			Rasterization 과정을 거쳐 픽셀별로 할당된 vertex shader의 출력값이 입력됨
			각 픽셀의 실제 색상 값이 출력되어야 함


	6. UNIFORM

		Shader에 전달 가능한 global value

			병렬로 수행되는 모든 shader thread들이 동일한 값을 전달받는다

		변수 선언 앞에 uniform type qualifier를 써서 선언
